//------------------------------------------------------------------------------
//
//  Description: This file contains the Main Routine - "While" Operating System
//
//  Jim Carlson
//  Jan 2023
//  Built with Code Composer Version: CCS12.4.0.00007_win64
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
#include  "msp430.h"
#include  <string.h>
#include <switches.h>
#include  "functions.h"
#include  "LCD.h"
#include  "ports.h"
#include  "macros.h"
#include  "motors.h"
#include  "Display.h"
#include  "timersB0.h"
#include  "switches.h"
#include  "ThumbWheel.h"

    // Libraries
#include <stdio.h>

// Function Prototypes
void main(void);
void Init_Conditions(void);
void Display_Process(void);
void Init_LEDs(void);
void StateMachine(void);

// Global Variables
volatile char slow_input_down;
extern char display_line[4][11];
extern char *display[4];
unsigned char display_mode;
extern volatile unsigned char display_changed;
extern volatile unsigned char update_display;
extern volatile unsigned int update_display_count;
extern volatile unsigned int Time_Sequence;
extern volatile char one_time;
unsigned int test_value;
char chosen_direction;
char change;

// New Global Variables for Button Switch & Movement
unsigned int backlight_status;
unsigned int Last_Time_Sequence;
unsigned int cycle_time;
unsigned int time_change;
unsigned char dispEvent;
unsigned char state;
unsigned char event;

unsigned int travel_distance;
unsigned int right_count_time;
unsigned int left_count_time;
unsigned int wheel_count_time;

unsigned int time_change;
unsigned int delay_start;
unsigned int cycle_time;
unsigned int right_motor_count;
unsigned int left_motor_count;
unsigned int segment_count;

unsigned int straight_step;
unsigned int circle_step;
unsigned int circle_step2;
unsigned int triangle_step;
unsigned int figure8_step;

extern short int p3_4_type;

extern unsigned int hexNumber;
extern unsigned int thousands;
extern unsigned int hundreds;
extern unsigned int tens;
extern unsigned int ones;

extern unsigned int ADC_Channel;
extern unsigned int ADC_Left_Detect;
extern unsigned int ADC_Right_Detect;
extern unsigned int ADC_Thumb;

int activateSM;

void main(void){
    //    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

    //------------------------------------------------------------------------------
    // Main Program
    // This is the main routine for the program. Execution of code starts here.
    // The operating system is Back Ground Fore Ground.
    //
    //------------------------------------------------------------------------------
    PM5CTL0 &= ~LOCKLPM5;
    // Disable the GPIO power-on default high-impedance mode to activate
    // previously configured port settings
    p3_4_type = USE_SMCLK;
    Init_Ports();                        // Initialize Ports
    Init_Clocks();                       // Initialize Clock System
    Init_Conditions();                   // Initialize Variables and Initial Conditions
    Init_Timers();                       // Initialize Timers
    Init_LCD();                          // Initialize LCD
    // Place the contents of what you want on the display, in between the quotes
    // Limited to 10 characters per line
    strcpy(display_line[0], "          ");
    strcpy(display_line[1], "Press  SW1");
    strcpy(display_line[2], " To Begin ");
    strcpy(display_line[3], "          ");
    display_changed = TRUE;
    //  Display_Update(0,0,0,0);


    //------------------------------------------------------------------------------
    // Beginning of the "While" Operating System
    //------------------------------------------------------------------------------
    backlight_status = 0;
    dispEvent = NONE;
    state = WAIT;
    motorsOFF();
    event = NONE;
    straight_step = 0;
    enable_switches();
    activateSM = 0;

    hexNumber = ADC_Thumb; // 1001[DEC] // No Idea how to actually read this value from Dial on Car.
//    thumb_wheel_changed = TRUE;


    while(ALWAYS) {                      // Can the Operating system run
//        backlight_status = 1;
//        StateMachine();            // Run a Time Based State Machine
        Display_Process();                 // Update Display
        P3OUT ^= TEST_PROBE;               // Change State of TEST_PROBE OFF
        backlight_control();
        if(Last_Time_Sequence != Time_Sequence){
            Last_Time_Sequence = Time_Sequence;
            cycle_time++;
            time_change = 1;
        }

        // Switch1_Process();
        // Switch2_Process();
        // Move_Shape(); //Nothing will happen UNTIL proper buttons are pressed, stored in motors.c
        //        Switch1_Proj5_Process();
        //        moveSeq_proj5();
        if(hexNumber != ADC_Thumb){
            hexNumber = ADC_Thumb;
            hex_bcd();
        }
        vrfyDirection();
        debounce();
    }



    //------------------------------------------------------------------------------



}



void StateMachine(void){
    if(activateSM){
        switch(Time_Sequence){
        case 10:
            strcpy(display_line[0], "          ");
            strcpy(display_line[1], " Forward  ");
            strcpy(display_line[2], "   1 Sec  ");
            strcpy(display_line[3], "          ");
            display_changed = TRUE;
            LRFwdON();
            break;
        case 15:
            strcpy(display_line[0], "          ");
            strcpy(display_line[1], "    Wait  ");
            strcpy(display_line[2], "   1 Sec  ");
            strcpy(display_line[3], "          ");
            display_changed = TRUE;
            LRFwdOFF();
            motorsOFF();
            break;
        case 20:
            strcpy(display_line[0], "          ");
            strcpy(display_line[1], " Reverse  ");
            strcpy(display_line[2], "   2 Sec  ");
            strcpy(display_line[3], "          ");
            display_changed = TRUE;
            LRRevON();
            break;
        case 30:
            strcpy(display_line[0], "          ");
            strcpy(display_line[1], "    Wait  ");
            strcpy(display_line[2], "   1 Sec  ");
            strcpy(display_line[3], "          ");
            display_changed = TRUE;
            LRRevOFF();
            motorsOFF();
            break;
        case 35:
            strcpy(display_line[0], "          ");
            strcpy(display_line[1], " Forward  ");
            strcpy(display_line[2], "   1 Sec  ");
            strcpy(display_line[3], "          ");
            display_changed = TRUE;
            LRFwdON();
            break;
        case 40:
            strcpy(display_line[0], "          ");
            strcpy(display_line[1], "    Wait  ");
            strcpy(display_line[2], "   1 Sec  ");
            strcpy(display_line[3], "          ");
            display_changed = TRUE;
            motorsOFF();
            break;
        case 45:
            strcpy(display_line[0], "Clockwise ");
            strcpy(display_line[1], "    Spin  ");
            strcpy(display_line[2], "   3 Sec  ");
            strcpy(display_line[3], "          ");
            display_changed = TRUE;
            P6OUT  |=  R_FORWARD;
            P6OUT  |=  L_REVERSE;
            break;
        case 60:
            strcpy(display_line[0], "          ");
            strcpy(display_line[1], "    Wait  ");
            strcpy(display_line[2], "   2 Sec  ");
            strcpy(display_line[3], "          ");
            display_changed = TRUE;
            motorsOFF();
            break;
        case 70:
            strcpy(display_line[0], "CounterCW ");
            strcpy(display_line[1], "    Spin  ");
            strcpy(display_line[2], "   3 Sec  ");
            strcpy(display_line[3], "          ");
            display_changed = TRUE;
            P6OUT  |=  L_FORWARD;
            P6OUT  |=  R_REVERSE;
            break;
        case 85:
            strcpy(display_line[0], "          ");
            strcpy(display_line[1], "    Wait  ");
            strcpy(display_line[2], "   2 Sec  ");
            strcpy(display_line[3], "          ");
            display_changed = TRUE;
            motorsOFF();
            break;
        case 95:
            strcpy(display_line[0], "    State ");
            strcpy(display_line[1], "   Machine");
            strcpy(display_line[2], " Complete ");
            strcpy(display_line[3], "          ");
            display_changed = TRUE;
            motorsOFF();
            break;
        default: break;
        }
    }
}


//
//// Function Call
void testDispPrint() {
    char str_thousands[11] = "test";
    char str_hundreds[11] = "hi";
    char str_tens[11] = "yyyyyyyyyy";
    char str_ones[11] = " A E I O U";

    // Call display function
    dispPrint(str_thousands, str_hundreds, str_tens, str_ones);
}


